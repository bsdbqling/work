
1.使用之前需要安装运行环境。

2.在dos命令下 输入： node -v 显示版本号即表示安装成功


一。基础知识汇总：

1）简介
  Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。
  Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。
  Node.js 的包管理器 npm，是全球最大的开源库生态系统。
  单线程 异步 事件驱动。
  特点：快，内存消耗多。
  框架选择：express， koa， Hapi 以及express基础之上的sails

2）全局对象（global）：
    __dirname: 获取当前执行环境下的文件目录地址（如：/Users/a1/Sites/web_test/zyzhang/z_nodejsstudy/js）
    __filename: 获取当前执行环境下的文件（如：/Users/a1/Sites/web_test/zyzhang/z_nodejsstudy/js/global.js）
    两者直接的区别通过比较很容易区分。

    console.log , console.info , console.error , console.warn
    i) 这四种输出还是有不一样的效果，前两者为普通的信息输出，后两者输出的信息会标红。
    ii) 除此之外还有另外一个不同的地方就是文件重定向：如我们在一个js文件中都写入这四种写法，在dos命令下执行js文件
    （node xxx.js > log.txt）warn,err 的信息会输出，log,info的打印信息会保存在log.txt文件中。也就是说
    日志和信息会重定向到文件中。
    iii) dos命令下执行：node xxx.js 1>log.txt 2>error.txt (1代表普通，2代表有错误的)。最终的效果就是log.txt
    文件中保存的是普通信息，error.txt文件保存的是错误信息。

    console.time: 一段代码执行时间
    console.timeEnd
    eg:
      console.time('test');
      for (var i = 0; i<100000;i++){}
      console.timeEnd('test');
     这段代码执行效果为：test: 252.257ms （每次结果都不一样，它的意思就是执行这个for循环所耗的时间）

    process.stdout :标准信息输出
    process.stderr :标准错误输出
    process.stdin :读取用户的键盘输入

    process.cwd : 执行命令所在的目录 而__dirname代表js文件所在的目录

    process.on()
      1) exit 程序正常退出所触发的事件
      2）SIGINT(signal interrupted) 中断的时候触发
    如：process.on('exit',function(){
          console.log('program will exit');
        });

    process.argv 返回是一个数组(文件的绝对路径)
       第一项返回的是node安装目录；第二项是当前执行文件的目录地址

3）模块和包
  模块：一个实现某些特定功能的文件，以实现模块化编程。
  通过require(模块名)引入模块。eg:require('./sum.js')。
  模块中的功能（如变量、函数）通过赋给exports对象的某个属性提供给调用者使用。

  包：包是一个文件夹，将模块封装起来，用于发布、更新、依赖管理和版本控制。
    通过package.json来描述包的信息：入口文件，依赖的外部包等
    通过npm install命令来安装包，并通过require使用包。 remove 移除

4）4.1)fs:文件系统模块
    require('fs') ： 拿到node.js提供的文件操作相关的一个对象。
    读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。
    异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。
    建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。

   4.2)path:处理文件路径
     require('path')：用于处理文件路径的小工具,用法如下：
     方法：
       path.extname() 返回路径中文件的后缀名（如：path.extname('zyzhang.txt') 会输出".txt"）
       path.parse(pathString) 返回路径字符串的对象 如：console.log(path.parse('zyzhang/aaa/aa.txt')
         会输出：{ root: '',dir: 'zyzhang/aaa', base: 'aa.txt',ext: '.txt',name: 'aa' })；

     属性：path.sep 平台的文件路径分隔符（如：在windows下会输出"\",在linux下会输出"/"）。

   4.3)有时我们需要服务器打交道，如表单提交，我们需要使用到get和post请求。
     require('url')：如url.parse('rulpath')是解析URL字符串的
     require('http')：http 模块主要用于搭建 HTTP 服务端和客户端
    实例：使用node.js创建一个web服务器。（helloweb.js）


5)request 和 response 对象:处理请求和响应的数据
    request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。
    response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。

    常见属性：
        req.query：获取URL的查询参数串
        req.path：获取请求路径
        req.params：获取路由的parameters

        res.send（）：传送HTTP响应
        res.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type


6）send():向浏览器发送一个响应信息，并可以智能处理不同类型的数据
    1.当参数为一个String时，Content-Type默认设置为"text/html"。
        如：res.send('Hello World'); //Hello World
    2.当参数为Array或Object时，Express会返回一个JSON。
        如：res.send({ user: 'tobi' }); //{"user":"tobi"}
          res.send([1,2,3]); //[1,2,3]
    3.当参数为一个Number时，并且没有上面提到的任何一条在响应体里，Express会帮你设置一个响应体，比如：200会返回字符"OK"。
        如：res.send(200); // OK
          res.send(404); // Not Found
          res.send(500); // Internal Server Error
    send方法在输出响应时会自动进行一些设置，比如HEAD信息、HTTP缓存支持等等。

7）异步流程控制对象async
    7.1 串行无关联：async.series
    7.2 并行无关联：async.parallel
    7.3 串行有关联：async.watefall
    7.4 parallenLimit:和parallel类似，但多了个参数limit（限制并发数量）

    7.5 使用：安装 npm install async --save--dev

   7.5.1 series实例：
    function exec(){
        async.series({
            one:function(done){
                ii=0;
                setInterval(function(){
                    console.log("aaa="+new Date());
                    ii++;
                    if(ii===3){
                        clearInterval(this);
                        done(null,'one完毕')；
                    }
                },1000);
            },
            two:function(done){
                jj=0;
                setInterval(function(){
                    console.log("aaa="+new Date());
                    ii++;
                    if(ii===3){
                        clearInterval(this);
                        done(null,'two完毕');
                    }
                },1000);
            }
        },function(err,rs){
          console.log(err);
          console.log(rs);
        });
        console.log("执行完毕");
    }
    exec();

    运行结果如下：
    aaa=Fri Nov 11 2016 17:05:18 GMT+0800 (CST)
    aaa=Fri Nov 11 2016 17:05:19 GMT+0800 (CST)
    bbb=Fri Nov 11 2016 17:05:20 GMT+0800 (CST)
    bbb=Fri Nov 11 2016 17:05:21 GMT+0800 (CST)
    bbb=Fri Nov 11 2016 17:05:22 GMT+0800 (CST)
    null
    { one: 'one完毕', two: 'two完毕' }

    7.5.2parallel实例（将series换成parallel）
     运行结果如下：
     aaa=Fri Nov 11 2016 17:07:02 GMT+0800 (CST)
     bbb=Fri Nov 11 2016 17:07:02 GMT+0800 (CST)
     aaa=Fri Nov 11 2016 17:07:03 GMT+0800 (CST)
     bbb=Fri Nov 11 2016 17:07:03 GMT+0800 (CST)
     aaa=Fri Nov 11 2016 17:07:04 GMT+0800 (CST)
     bbb=Fri Nov 11 2016 17:07:04 GMT+0800 (CST)
     null
     { one: 'one完毕', two: 'two完毕' }

    7.5.3
    function exec() {
        async.watefall([
            function (done) {
                ii = 0;
                setInterval(function () {
                    console.log("aaa=" + new Date());
                    ii++;
                    if (ii === 3) {
                        clearInterval(this);
                        done(null,'one完毕');
                    }
                }, 1000);
            },
            function (preValue,done) {
                jj = 0;
                setInterval(function () {
                    console.log(preValue +"="+ new Date());
                    jj++;
                    if (jj === 3) {
                        clearInterval(this);
                        done(null, preValue+'two完毕');
                    }
                }, 1000);
            }
        ], function (err, rs) {
            console.log(err);
            console.log(rs);
        });
    }




二。Express框架

1）简介：
    express : 基于 Node.js 平台，快速、开放、极简的 web 开发框架。
        使用 Express 可以快速地搭建一个完整功能的网站。
        在dos命令下 输入 npm install express --save 表示安装。
        代码：var express = require('express');
             var app = express();
        Express 框架核心特性：
          可以设置中间件来响应 HTTP 请求。
          定义了路由表用于执行不同的 HTTP 请求动作。
          可以通过向模板传递参数来动态渲染 HTML 页面。

2）get请求:
    get请求：app.get(path,function(request, response));
    path为请求的路径，第二个参数为处理请求的回调函数，有两个参数分别是request和response，代表请求信息和响应信息。

3）use：
   是express调用中间件的方法，它返回一个函数。
   格式：app.use([path], function(request, response, next){});
   可选参数path默认为"/"。
   使用中间件：使用use函数调用express中间件设定了静态文件目录的访问路径(这里假设为根路径)。如下
   app.use(express.static(path.join(__dirname, '/')));
   use方法不仅可以调用中间件，还可以根据请求的网址，返回不同的网页内容。

4）redirect:
    redirect方法允许网址的重定向，跳转到指定的url并且可以指定status，默认为302方式。
    格式：res.redirect([status], url);

    例1：使用一个完整的url跳转到一个完全不同的域名。
    res.redirect("http://www.hubwiz.com");
    例2：跳转指定页面，比如登陆页，如下：
    res.redirect("login");

5)中间件body-parser和multer用于处理和解析post请求的数据。
    安装：npm install body-parser
       npm install multer

    引用和调用：
        var bodyParser = require('body-parser');
        var multer = require('multer');
           ......
        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({ extended: true }));
        app.use(multer());

6)ejs模版：
    在nodejs中使用express框架，它默认的是ejs和jade渲染模板。
    安装方法：npm install ejs（注：npm安装会很慢，一般会使用淘宝镜像）。
    如何调用：
        // 修改模板文件的后缀名为html
        app.set( 'view engine', 'html' );
        // 运行ejs模块
        app.engine( '.html', require( 'ejs' ).__express );

7）res.render(file,option)是express中专门渲染视图用的。
    因为前面应该已经定义好了views文件夹的目录，所以render()渲染时会去这个文件夹找对应的模板去渲染。